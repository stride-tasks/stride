// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: require_trailing_commas
// ignore_for_file: avoid_unused_constructor_parameters
// ignore_for_file: avoid_dynamic_calls
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: inference_failure_on_instance_creation

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:stride/bridge/frb_generated.dart';
import 'package:stride/bridge/third_party/stride_core/task/annotation.dart';
import 'package:uuid/uuid.dart';

part 'task.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `from`, `hash`, `hash`

/// flutter_rust_bridge:dart_metadata=("freezed")
@freezed
class Task with _$Task {
  /// flutter_rust_bridge:sync
  factory Task({required String title}) =>
      RustLib.instance.api.strideCoreTaskTaskNew(title: title);
  const Task._();
  const factory Task.raw({
    required UuidValue uuid,
    required TaskStatus status,
    required String title,
    required bool active,
    DateTime? modified,
    DateTime? due,
    int? project,
    required Uint32List tags,
    required List<Annotation> annotations,
    TaskPriority? priority,
    DateTime? wait,
    required List<UuidValue> depends,
    required Map<String, String> uda,
  }) = _Task;
  static Future<Task> default_() =>
      RustLib.instance.api.strideCoreTaskTaskDefault();

  Future<DateTime> entry() => RustLib.instance.api.strideCoreTaskTaskEntry(
        that: this,
      );

  static Future<Task?> fromData({required List<int> input}) =>
      RustLib.instance.api.strideCoreTaskTaskFromData(input: input);

  Future<Uint8List> toData() => RustLib.instance.api.strideCoreTaskTaskToData(
        that: this,
      );

  /// flutter_rust_bridge:sync
  double urgency() => RustLib.instance.api.strideCoreTaskTaskUrgency(
        that: this,
      );

  static Future<Task> withUuid(
          {required UuidValue uuid, required String title}) =>
      RustLib.instance.api.strideCoreTaskTaskWithUuid(uuid: uuid, title: title);
}

enum TaskPriority {
  h,
  m,
  l,
  ;

  Future<void> asStr() => RustLib.instance.api.strideCoreTaskTaskPriorityAsStr(
        that: this,
      );

  static Future<TaskPriority> default_() =>
      RustLib.instance.api.strideCoreTaskTaskPriorityDefault();
}

enum TaskStatus {
  pending,
  waiting,
  recurring,
  deleted,
  complete,
  ;

  static Future<TaskStatus> default_() =>
      RustLib.instance.api.strideCoreTaskTaskStatusDefault();

  Future<bool> isPending() =>
      RustLib.instance.api.strideCoreTaskTaskStatusIsPending(
        that: this,
      );
}
