// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: avoid_unused_constructor_parameters
// ignore_for_file: avoid_dynamic_calls
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: inference_failure_on_instance_creation

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:stride/bridge/frb_generated.dart';
import 'package:stride/bridge/third_party/stride_core/task.dart';
import 'package:stride/bridge/third_party/stride_core/task/annotation.dart';
import 'package:stride/bridge/third_party/stride_core/task/uda.dart';
import 'package:uuid/uuid.dart';

part 'event.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `eq`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<HostEvent>>
abstract class HostEvent implements RustOpaqueInterface {
  /// flutter_rust_bridge:sync
  static HostEvent networkResponse({
    required String host,
    required List<int> content,
  }) => RustLib.instance.api.strideCoreEventHostEventNetworkResponse(
    host: host,
    content: content,
  );

  /// flutter_rust_bridge:sync
  static HostEvent taskCreate({Task? task}) =>
      RustLib.instance.api.strideCoreEventHostEventTaskCreate(task: task);

  /// flutter_rust_bridge:sync
  static HostEvent taskModify({Task? current, Task? previous}) => RustLib
      .instance
      .api
      .strideCoreEventHostEventTaskModify(current: current, previous: previous);

  /// flutter_rust_bridge:sync
  static HostEvent taskQuery({required List<Task> tasks}) =>
      RustLib.instance.api.strideCoreEventHostEventTaskQuery(tasks: tasks);

  /// flutter_rust_bridge:sync
  static HostEvent taskSync() =>
      RustLib.instance.api.strideCoreEventHostEventTaskSync();

  /// flutter_rust_bridge:sync
  static HostEvent timer({required int interval}) =>
      RustLib.instance.api.strideCoreEventHostEventTimer(interval: interval);
}

/// flutter_rust_bridge:non_opaque
enum NetworkRequestType { get_ }

@freezed
sealed class PluginEvent with _$PluginEvent {
  const PluginEvent._();

  const factory PluginEvent.taskCreate({required Task task}) =
      PluginEvent_TaskCreate;
  const factory PluginEvent.taskModify({required Task task}) =
      PluginEvent_TaskModify;
  const factory PluginEvent.taskQuery({required TaskQuery query}) =
      PluginEvent_TaskQuery;
  const factory PluginEvent.taskSync() = PluginEvent_TaskSync;
  const factory PluginEvent.networkRequest({
    required NetworkRequestType ty,
    required String host,
  }) = PluginEvent_NetworkRequest;
}

@freezed
sealed class TaskQuery with _$TaskQuery {
  const TaskQuery._();

  const factory TaskQuery.uuid({required UuidValue uuid}) = TaskQuery_Uuid;
  const factory TaskQuery.title({
    required String title,
    required Set<TaskStatus> status,
    int? limit,
  }) = TaskQuery_Title;
}
