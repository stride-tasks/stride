// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: avoid_unused_constructor_parameters
// ignore_for_file: avoid_dynamic_calls
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: inference_failure_on_instance_creation

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:stride/bridge/frb_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `HostRef`, `KnownHostsError`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `from`
// These functions are ignored (category: IgnoreBecauseExplicitAttribute): `add`, `as_ref`, `from_str`, `from_str`, `host`, `hosts`, `name`, `new`, `new`, `parse_str`, `read_file`, `read_standard_file`, `remove_by_hostname`, `short_name`, `try_from`, `write_file`, `write_standard_file`

/// flutter_rust_bridge:non_opaque
class Host {
  final String hostname;
  final HostKeyType keyType;

  /// The public key of the remote server/host.
  ///
  /// The key is base64 encoded.
  final String key;

  const Host({
    required this.hostname,
    required this.keyType,
    required this.key,
  });

  @override
  int get hashCode => hostname.hashCode ^ keyType.hashCode ^ key.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Host &&
          runtimeType == other.runtimeType &&
          hostname == other.hostname &&
          keyType == other.keyType &&
          key == other.key;
}

/// flutter_rust_bridge:ignore
enum HostKeyType { rsa, dss, ecdsa256, ecdsa384, ecdsa521, ed255219 }

/// flutter_rust_bridge:non_opaque
class KnownHosts {
  final List<Host> hosts;

  const KnownHosts({required this.hosts});

  static Future<KnownHosts> default_() =>
      RustLib.instance.api.strideBackendGitKnownHostsKnownHostsDefault();

  static Future<KnownHosts> load() =>
      RustLib.instance.api.strideBackendGitKnownHostsKnownHostsLoad();

  static Future<void> save({required KnownHosts this_}) => RustLib.instance.api
      .strideBackendGitKnownHostsKnownHostsSave(this_: this_);

  @override
  int get hashCode => hosts.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is KnownHosts &&
          runtimeType == other.runtimeType &&
          hosts == other.hosts;
}
