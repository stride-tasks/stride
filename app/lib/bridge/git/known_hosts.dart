// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:stride/bridge/api/error.dart';
import 'package:stride/bridge/frb_generated.dart';

part 'known_hosts.freezed.dart';

class Host {
  final String hostname;
  final HostKeyType keyType;

  /// The public key of the remote server/host.
  ///
  /// The key is base64 encoded.
  final String key;

  const Host({
    required this.hostname,
    required this.keyType,
    required this.key,
  });

  @override
  int get hashCode => hostname.hashCode ^ keyType.hashCode ^ key.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Host &&
          runtimeType == other.runtimeType &&
          hostname == other.hostname &&
          keyType == other.keyType &&
          key == other.key;
}

enum HostKeyType {
  rsa,
  dss,
  ecdsa256,
  ecdsa384,
  ecdsa521,
  ed255219,
  ;
}

@freezed
class KnownHosts with _$KnownHosts {
  const factory KnownHosts({
    required List<Host> hosts,
  }) = _KnownHosts;
  const KnownHosts._();
  static Future<KnownHosts> load() =>
      RustLib.instance.api.crateGitKnownHostsKnownHostsLoad();

  static Future<void> save({required KnownHosts this_}) =>
      RustLib.instance.api.crateGitKnownHostsKnownHostsSave(this_: this_);
}
