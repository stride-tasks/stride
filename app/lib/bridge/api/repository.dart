// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: avoid_unused_constructor_parameters
// ignore_for_file: avoid_dynamic_calls
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: inference_failure_on_instance_creation

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:stride/bridge/api/error.dart';
import 'package:stride/bridge/api/filter.dart';
import 'package:stride/bridge/frb_generated.dart';
import 'package:stride/bridge/third_party/stride_core/event.dart';
import 'package:stride/bridge/third_party/stride_core/task.dart';
import 'package:stride/bridge/third_party/stride_core/task/annotation.dart';
import 'package:stride/bridge/third_party/stride_core/task/uda.dart';
import 'package:uuid/uuid.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `fmt`
// These functions are ignored (category: IgnoreBecauseExplicitAttribute): `database_mut`, `database`, `root_path`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Repository>>
abstract class Repository implements RustOpaqueInterface {
  Future<void> addBackend({required String name});

  Future<List<Task>> allTasks({required Filter filter});

  Future<List<String>> backendNames();

  Future<List<BackendRecord>> backends();

  Future<void> insertTask({required Task task});

  static Repository open({required UuidValue uuid}) =>
      RustLib.instance.api.crateApiRepositoryRepositoryOpen(uuid: uuid);

  Future<Task?> purgeTaskById({required UuidValue id});

  Future<void> sync_();

  Future<Task?> taskById({required UuidValue id});

  Future<List<Task>> taskQuery({required TaskQuery query});

  Future<List<Task>> tasksByStatus({required Set<TaskStatus> status});

  Future<void> undo();

  Future<void> updateBackend({required BackendRecord backend});

  Future<void> updateTask({required Task task});
}

class BackendRecord {
  final UuidValue id;
  final String name;
  final bool enabled;
  final String config;

  const BackendRecord({
    required this.id,
    required this.name,
    required this.enabled,
    required this.config,
  });

  @override
  int get hashCode =>
      id.hashCode ^ name.hashCode ^ enabled.hashCode ^ config.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BackendRecord &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          enabled == other.enabled &&
          config == other.config;
}
