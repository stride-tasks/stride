// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: require_trailing_commas
// ignore_for_file: always_use_package_imports
// ignore_for_file: directives_ordering
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: avoid_unused_constructor_parameters
// ignore_for_file: avoid_dynamic_calls
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: prefer_final_locals
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: inference_failure_on_instance_creation
// ignore_for_file: prefer_single_quotes
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: noop_primitive_operations
// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_is_empty
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/error.dart';
import 'api/filter.dart';
import 'api/logging.dart';
import 'api/repository.dart';
import 'api/settings.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'git/known_hosts.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';
import 'task.dart';
import 'task/annotation.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiRepositoryInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.3.0';

  @override
  int get rustContentHash => -1064230649;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'stride_flutter_bridge',
    ioDirectory: '../crates/flutter_bridge/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Host? crateApiErrorRustErrorAsUnknownHost({required RustError that});

  String crateApiErrorRustErrorToErrorString({required RustError that});

  Future<Filter> crateApiFilterFilterDefault();

  Future<String> crateApiLoggingGetLogs();

  Future<void> crateApiLoggingLoggerDebug({required String message});

  Future<void> crateApiLoggingLoggerError({required String message});

  Future<void> crateApiLoggingLoggerInfo({required String message});

  Future<void> crateApiLoggingLoggerTrace({required String message});

  Future<void> crateApiLoggingLoggerWarn({required String message});

  Future<void> crateApiRepositoryTaskStorageAdd(
      {required TaskStorage that, required Task task});

  Future<bool> crateApiRepositoryTaskStorageAddAndCommit(
      {required TaskStorage that, required String message});

  Future<bool> crateApiRepositoryTaskStorageChangeCategory(
      {required TaskStorage that,
      required Task task,
      required TaskStatus status});

  Future<void> crateApiRepositoryTaskStorageCheckout(
      {required TaskStorage that});

  Future<void> crateApiRepositoryTaskStorageClear({required TaskStorage that});

  Future<void> crateApiRepositoryTaskStorageCloneRepository(
      {required TaskStorage that});

  Future<String> crateApiRepositoryTaskStorageExport(
      {required TaskStorage that});

  Future<void> crateApiRepositoryTaskStorageForceHardReset(
      {required TaskStorage that, required Oid commit});

  Future<void> crateApiRepositoryTaskStorageImport(
      {required TaskStorage that, required String content});

  Future<void> crateApiRepositoryTaskStorageInitRepotitory(
      {required TaskStorage that});

  Future<List<CommitItem>?> crateApiRepositoryTaskStorageLog(
      {required TaskStorage that, Oid? oid, int? n});

  TaskStorage crateApiRepositoryTaskStorageNew(
      {required String path, required Settings settings});

  Future<void> crateApiRepositoryTaskStoragePush(
      {required TaskStorage that, required bool force});

  Future<bool> crateApiRepositoryTaskStorageRemoveTask(
      {required TaskStorage that, required Task task});

  Future<void> crateApiRepositoryTaskStorageSync({required TaskStorage that});

  Future<Task?> crateApiRepositoryTaskStorageTaskByUuid(
      {required TaskStorage that, required UuidValue uuid});

  Future<List<Task>> crateApiRepositoryTaskStorageTasks(
      {required TaskStorage that});

  Future<List<Task>> crateApiRepositoryTaskStorageTasksWithFilter(
      {required TaskStorage that, required Filter filter});

  Future<void> crateApiRepositoryTaskStorageUnload({required TaskStorage that});

  Future<bool> crateApiRepositoryTaskStorageUpdate(
      {required TaskStorage that, required Task task});

  Future<void> crateApiRepositoryInitApp();

  String crateApiRepositoryOidToString({required Oid oid});

  Future<SshKey> crateApiSettingsSshKeyGenerate();

  String crateApiSettingsSshKeyPublicKey({required SshKey that});

  Future<bool> crateApiSettingsSshKeyRemoveKey({required UuidValue uuid});

  Future<SshKey> crateApiSettingsSshKeySave(
      {required String publicKey, required String privateKey});

  Future<SshKey> crateApiSettingsSshKeyUpdate(
      {required UuidValue uuid,
      required String publicKey,
      required String privateKey});

  UuidValue crateApiSettingsSshKeyUuid({required SshKey that});

  Future<ApplicationPaths> crateApiSettingsApplicationPathsDefault();

  Future<EncryptionKey> crateApiSettingsEncryptionKeyGenerate();

  Future<bool> crateApiSettingsEncryptionKeyRemoveKey(
      {required UuidValue uuid});

  Future<EncryptionKey> crateApiSettingsEncryptionKeySave(
      {required String key});

  Future<EncryptionKey> crateApiSettingsEncryptionKeyUpdate(
      {required UuidValue uuid, required String key});

  Future<Repository> crateApiSettingsRepositoryDefault();

  Future<Settings> crateApiSettingsSettingsDefault();

  Future<Settings> crateApiSettingsSettingsLoad(
      {required ApplicationPaths paths});

  Settings crateApiSettingsSettingsNew();

  Future<void> crateApiSettingsSettingsSave({required Settings settings});

  Future<List<SshKey>> crateApiSettingsSshKeys();

  Task crateTaskTaskNew({required String title});

  double crateTaskTaskUrgency({required Task that});

  Future<Task> crateTaskTaskWithUuid(
      {required UuidValue uuid, required String title});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Oid;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Oid;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OidPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RustError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RustError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RustErrorPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_SshKey;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_SshKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SshKeyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TaskStorage;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TaskStorage;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TaskStoragePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Host? crateApiErrorRustErrorAsUnknownHost({required RustError that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_host,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiErrorRustErrorAsUnknownHostConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiErrorRustErrorAsUnknownHostConstMeta =>
      const TaskConstMeta(
        debugName: "RustError_as_unknown_host",
        argNames: ["that"],
      );

  @override
  String crateApiErrorRustErrorToErrorString({required RustError that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiErrorRustErrorToErrorStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiErrorRustErrorToErrorStringConstMeta =>
      const TaskConstMeta(
        debugName: "RustError_to_error_string",
        argNames: ["that"],
      );

  @override
  Future<Filter> crateApiFilterFilterDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_filter,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiFilterFilterDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFilterFilterDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "filter_default",
        argNames: [],
      );

  @override
  Future<String> crateApiLoggingGetLogs() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggingGetLogsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggingGetLogsConstMeta => const TaskConstMeta(
        debugName: "get_logs",
        argNames: [],
      );

  @override
  Future<void> crateApiLoggingLoggerDebug({required String message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggingLoggerDebugConstMeta,
      argValues: [message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggingLoggerDebugConstMeta => const TaskConstMeta(
        debugName: "logger_debug",
        argNames: ["message"],
      );

  @override
  Future<void> crateApiLoggingLoggerError({required String message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggingLoggerErrorConstMeta,
      argValues: [message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggingLoggerErrorConstMeta => const TaskConstMeta(
        debugName: "logger_error",
        argNames: ["message"],
      );

  @override
  Future<void> crateApiLoggingLoggerInfo({required String message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggingLoggerInfoConstMeta,
      argValues: [message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggingLoggerInfoConstMeta => const TaskConstMeta(
        debugName: "logger_info",
        argNames: ["message"],
      );

  @override
  Future<void> crateApiLoggingLoggerTrace({required String message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggingLoggerTraceConstMeta,
      argValues: [message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggingLoggerTraceConstMeta => const TaskConstMeta(
        debugName: "logger_trace",
        argNames: ["message"],
      );

  @override
  Future<void> crateApiLoggingLoggerWarn({required String message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggingLoggerWarnConstMeta,
      argValues: [message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggingLoggerWarnConstMeta => const TaskConstMeta(
        debugName: "logger_warn",
        argNames: ["message"],
      );

  @override
  Future<void> crateApiRepositoryTaskStorageAdd(
      {required TaskStorage that, required Task task}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        sse_encode_box_autoadd_task(task, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiRepositoryTaskStorageAddConstMeta,
      argValues: [that, task],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageAddConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_add",
        argNames: ["that", "task"],
      );

  @override
  Future<bool> crateApiRepositoryTaskStorageAddAndCommit(
      {required TaskStorage that, required String message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiRepositoryTaskStorageAddAndCommitConstMeta,
      argValues: [that, message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageAddAndCommitConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_add_and_commit",
        argNames: ["that", "message"],
      );

  @override
  Future<bool> crateApiRepositoryTaskStorageChangeCategory(
      {required TaskStorage that,
      required Task task,
      required TaskStatus status}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        sse_encode_box_autoadd_task(task, serializer);
        sse_encode_task_status(status, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiRepositoryTaskStorageChangeCategoryConstMeta,
      argValues: [that, task, status],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageChangeCategoryConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_change_category",
        argNames: ["that", "task", "status"],
      );

  @override
  Future<void> crateApiRepositoryTaskStorageCheckout(
      {required TaskStorage that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiRepositoryTaskStorageCheckoutConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageCheckoutConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_checkout",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiRepositoryTaskStorageClear({required TaskStorage that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiRepositoryTaskStorageClearConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageClearConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_clear",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiRepositoryTaskStorageCloneRepository(
      {required TaskStorage that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiRepositoryTaskStorageCloneRepositoryConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageCloneRepositoryConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_clone_repository",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiRepositoryTaskStorageExport(
      {required TaskStorage that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiRepositoryTaskStorageExportConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageExportConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_export",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiRepositoryTaskStorageForceHardReset(
      {required TaskStorage that, required Oid commit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
            commit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiRepositoryTaskStorageForceHardResetConstMeta,
      argValues: [that, commit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageForceHardResetConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_force_hard_reset",
        argNames: ["that", "commit"],
      );

  @override
  Future<void> crateApiRepositoryTaskStorageImport(
      {required TaskStorage that, required String content}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        sse_encode_String(content, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiRepositoryTaskStorageImportConstMeta,
      argValues: [that, content],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageImportConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_import",
        argNames: ["that", "content"],
      );

  @override
  Future<void> crateApiRepositoryTaskStorageInitRepotitory(
      {required TaskStorage that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiRepositoryTaskStorageInitRepotitoryConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageInitRepotitoryConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_init_repotitory",
        argNames: ["that"],
      );

  @override
  Future<List<CommitItem>?> crateApiRepositoryTaskStorageLog(
      {required TaskStorage that, Oid? oid, int? n}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
            oid, serializer);
        sse_encode_opt_box_autoadd_u_32(n, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_commit_item,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiRepositoryTaskStorageLogConstMeta,
      argValues: [that, oid, n],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageLogConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_log",
        argNames: ["that", "oid", "n"],
      );

  @override
  TaskStorage crateApiRepositoryTaskStorageNew(
      {required String path, required Settings settings}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        sse_encode_box_autoadd_settings(settings, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRepositoryTaskStorageNewConstMeta,
      argValues: [path, settings],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageNewConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_new",
        argNames: ["path", "settings"],
      );

  @override
  Future<void> crateApiRepositoryTaskStoragePush(
      {required TaskStorage that, required bool force}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        sse_encode_bool(force, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiRepositoryTaskStoragePushConstMeta,
      argValues: [that, force],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStoragePushConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_push",
        argNames: ["that", "force"],
      );

  @override
  Future<bool> crateApiRepositoryTaskStorageRemoveTask(
      {required TaskStorage that, required Task task}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        sse_encode_box_autoadd_task(task, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiRepositoryTaskStorageRemoveTaskConstMeta,
      argValues: [that, task],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageRemoveTaskConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_remove_task",
        argNames: ["that", "task"],
      );

  @override
  Future<void> crateApiRepositoryTaskStorageSync({required TaskStorage that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiRepositoryTaskStorageSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageSyncConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_sync",
        argNames: ["that"],
      );

  @override
  Future<Task?> crateApiRepositoryTaskStorageTaskByUuid(
      {required TaskStorage that, required UuidValue uuid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        sse_encode_Uuid(uuid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_task,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiRepositoryTaskStorageTaskByUuidConstMeta,
      argValues: [that, uuid],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageTaskByUuidConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_task_by_uuid",
        argNames: ["that", "uuid"],
      );

  @override
  Future<List<Task>> crateApiRepositoryTaskStorageTasks(
      {required TaskStorage that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_task,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiRepositoryTaskStorageTasksConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageTasksConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_tasks",
        argNames: ["that"],
      );

  @override
  Future<List<Task>> crateApiRepositoryTaskStorageTasksWithFilter(
      {required TaskStorage that, required Filter filter}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        sse_encode_box_autoadd_filter(filter, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_task,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiRepositoryTaskStorageTasksWithFilterConstMeta,
      argValues: [that, filter],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageTasksWithFilterConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_tasks_with_filter",
        argNames: ["that", "filter"],
      );

  @override
  Future<void> crateApiRepositoryTaskStorageUnload(
      {required TaskStorage that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRepositoryTaskStorageUnloadConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageUnloadConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_unload",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiRepositoryTaskStorageUpdate(
      {required TaskStorage that, required Task task}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
            that, serializer);
        sse_encode_box_autoadd_task(task, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiRepositoryTaskStorageUpdateConstMeta,
      argValues: [that, task],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryTaskStorageUpdateConstMeta =>
      const TaskConstMeta(
        debugName: "TaskStorage_update",
        argNames: ["that", "task"],
      );

  @override
  Future<void> crateApiRepositoryInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRepositoryInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  String crateApiRepositoryOidToString({required Oid oid}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
            oid, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRepositoryOidToStringConstMeta,
      argValues: [oid],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRepositoryOidToStringConstMeta =>
      const TaskConstMeta(
        debugName: "oid_to_string",
        argNames: ["oid"],
      );

  @override
  Future<SshKey> crateApiSettingsSshKeyGenerate() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiSettingsSshKeyGenerateConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSshKeyGenerateConstMeta =>
      const TaskConstMeta(
        debugName: "SshKey_generate",
        argNames: [],
      );

  @override
  String crateApiSettingsSshKeyPublicKey({required SshKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSettingsSshKeyPublicKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSshKeyPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: "SshKey_public_key",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiSettingsSshKeyRemoveKey({required UuidValue uuid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(uuid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiSettingsSshKeyRemoveKeyConstMeta,
      argValues: [uuid],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSshKeyRemoveKeyConstMeta =>
      const TaskConstMeta(
        debugName: "SshKey_remove_key",
        argNames: ["uuid"],
      );

  @override
  Future<SshKey> crateApiSettingsSshKeySave(
      {required String publicKey, required String privateKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(publicKey, serializer);
        sse_encode_String(privateKey, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiSettingsSshKeySaveConstMeta,
      argValues: [publicKey, privateKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSshKeySaveConstMeta => const TaskConstMeta(
        debugName: "SshKey_save",
        argNames: ["publicKey", "privateKey"],
      );

  @override
  Future<SshKey> crateApiSettingsSshKeyUpdate(
      {required UuidValue uuid,
      required String publicKey,
      required String privateKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(uuid, serializer);
        sse_encode_String(publicKey, serializer);
        sse_encode_String(privateKey, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiSettingsSshKeyUpdateConstMeta,
      argValues: [uuid, publicKey, privateKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSshKeyUpdateConstMeta =>
      const TaskConstMeta(
        debugName: "SshKey_update",
        argNames: ["uuid", "publicKey", "privateKey"],
      );

  @override
  UuidValue crateApiSettingsSshKeyUuid({required SshKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Uuid,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSettingsSshKeyUuidConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSshKeyUuidConstMeta => const TaskConstMeta(
        debugName: "SshKey_uuid",
        argNames: ["that"],
      );

  @override
  Future<ApplicationPaths> crateApiSettingsApplicationPathsDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_paths,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSettingsApplicationPathsDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsApplicationPathsDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "application_paths_default",
        argNames: [],
      );

  @override
  Future<EncryptionKey> crateApiSettingsEncryptionKeyGenerate() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_encryption_key,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSettingsEncryptionKeyGenerateConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsEncryptionKeyGenerateConstMeta =>
      const TaskConstMeta(
        debugName: "encryption_key_generate",
        argNames: [],
      );

  @override
  Future<bool> crateApiSettingsEncryptionKeyRemoveKey(
      {required UuidValue uuid}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(uuid, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSettingsEncryptionKeyRemoveKeyConstMeta,
      argValues: [uuid],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsEncryptionKeyRemoveKeyConstMeta =>
      const TaskConstMeta(
        debugName: "encryption_key_remove_key",
        argNames: ["uuid"],
      );

  @override
  Future<EncryptionKey> crateApiSettingsEncryptionKeySave(
      {required String key}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(key, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_encryption_key,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSettingsEncryptionKeySaveConstMeta,
      argValues: [key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsEncryptionKeySaveConstMeta =>
      const TaskConstMeta(
        debugName: "encryption_key_save",
        argNames: ["key"],
      );

  @override
  Future<EncryptionKey> crateApiSettingsEncryptionKeyUpdate(
      {required UuidValue uuid, required String key}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(uuid, serializer);
        sse_encode_String(key, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 42, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_encryption_key,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSettingsEncryptionKeyUpdateConstMeta,
      argValues: [uuid, key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsEncryptionKeyUpdateConstMeta =>
      const TaskConstMeta(
        debugName: "encryption_key_update",
        argNames: ["uuid", "key"],
      );

  @override
  Future<Repository> crateApiSettingsRepositoryDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 43, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_repository,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSettingsRepositoryDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsRepositoryDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "repository_default",
        argNames: [],
      );

  @override
  Future<Settings> crateApiSettingsSettingsDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_settings,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSettingsSettingsDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSettingsDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "settings_default",
        argNames: [],
      );

  @override
  Future<Settings> crateApiSettingsSettingsLoad(
      {required ApplicationPaths paths}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_application_paths(paths, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 45, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_settings,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSettingsSettingsLoadConstMeta,
      argValues: [paths],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSettingsLoadConstMeta =>
      const TaskConstMeta(
        debugName: "settings_load",
        argNames: ["paths"],
      );

  @override
  Settings crateApiSettingsSettingsNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_settings,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSettingsSettingsNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSettingsNewConstMeta =>
      const TaskConstMeta(
        debugName: "settings_new",
        argNames: [],
      );

  @override
  Future<void> crateApiSettingsSettingsSave({required Settings settings}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_settings(settings, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSettingsSettingsSaveConstMeta,
      argValues: [settings],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSettingsSaveConstMeta =>
      const TaskConstMeta(
        debugName: "settings_save",
        argNames: ["settings"],
      );

  @override
  Future<List<SshKey>> crateApiSettingsSshKeys() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 48, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError,
      ),
      constMeta: kCrateApiSettingsSshKeysConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSettingsSshKeysConstMeta => const TaskConstMeta(
        debugName: "ssh_keys",
        argNames: [],
      );

  @override
  Task crateTaskTaskNew({required String title}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(title, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_task,
        decodeErrorData: null,
      ),
      constMeta: kCrateTaskTaskNewConstMeta,
      argValues: [title],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateTaskTaskNewConstMeta => const TaskConstMeta(
        debugName: "task_new",
        argNames: ["title"],
      );

  @override
  double crateTaskTaskUrgency({required Task that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_task(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateTaskTaskUrgencyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateTaskTaskUrgencyConstMeta => const TaskConstMeta(
        debugName: "task_urgency",
        argNames: ["that"],
      );

  @override
  Future<Task> crateTaskTaskWithUuid(
      {required UuidValue uuid, required String title}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(uuid, serializer);
        sse_encode_String(title, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 51, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_task,
        decodeErrorData: null,
      ),
      constMeta: kCrateTaskTaskWithUuidConstMeta,
      argValues: [uuid, title],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateTaskTaskWithUuidConstMeta => const TaskConstMeta(
        debugName: "task_with_uuid",
        argNames: ["uuid", "title"],
      );

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Oid => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Oid => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RustError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RustError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SshKey => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SshKey => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TaskStorage => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TaskStorage => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Oid dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OidImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RustErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SshKey
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SshKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TaskStorage
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TaskStorageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TaskStorage
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TaskStorageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Oid dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OidImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustError
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RustErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SshKey
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SshKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TaskStorage
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TaskStorageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Oid dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OidImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RustErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SshKey
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SshKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TaskStorage
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TaskStorageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Set<TaskStatus> dco_decode_Set_task_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_task_status(raw));
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  UuidValue dco_decode_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UuidValue.fromByteList(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  Annotation dco_decode_annotation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Annotation(
      entry: dco_decode_Chrono_Utc(arr[0]),
      description: dco_decode_String(arr[1]),
    );
  }

  @protected
  ApplicationPaths dco_decode_application_paths(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ApplicationPaths(
      supportPath: dco_decode_String(arr[0]),
      documentPath: dco_decode_String(arr[1]),
      cachePath: dco_decode_String(arr[2]),
      logPath: dco_decode_String(arr[3]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Oid dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
        raw);
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Utc(raw);
  }

  @protected
  ApplicationPaths dco_decode_box_autoadd_application_paths(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_application_paths(raw);
  }

  @protected
  Filter dco_decode_box_autoadd_filter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_filter(raw);
  }

  @protected
  FilterSelection dco_decode_box_autoadd_filter_selection(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_filter_selection(raw);
  }

  @protected
  Host dco_decode_box_autoadd_host(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_host(raw);
  }

  @protected
  Settings dco_decode_box_autoadd_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_settings(raw);
  }

  @protected
  Task dco_decode_box_autoadd_task(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_task(raw);
  }

  @protected
  TaskPriority dco_decode_box_autoadd_task_priority(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_task_priority(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  CommitItem dco_decode_commit_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return CommitItem(
      oid:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
              arr[0]),
      parent:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
              arr[1]),
      message: dco_decode_String(arr[2]),
      author: dco_decode_String(arr[3]),
      email: dco_decode_String(arr[4]),
    );
  }

  @protected
  EncryptionKey dco_decode_encryption_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return EncryptionKey(
      uuid: dco_decode_Uuid(arr[0]),
      key: dco_decode_String(arr[1]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  Filter dco_decode_filter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Filter(
      uuid: dco_decode_Uuid(arr[0]),
      name: dco_decode_String(arr[1]),
      status: dco_decode_Set_task_status(arr[2]),
      search: dco_decode_String(arr[3]),
    );
  }

  @protected
  FilterSelection dco_decode_filter_selection(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return FilterSelection_Predefined(
          uuid: dco_decode_Uuid(raw[1]),
        );
      case 1:
        return FilterSelection_Temporary(
          filter: dco_decode_box_autoadd_filter(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Host dco_decode_host(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Host(
      hostname: dco_decode_String(arr[0]),
      keyType: dco_decode_host_key_type(arr[1]),
      key: dco_decode_String(arr[2]),
    );
  }

  @protected
  HostKeyType dco_decode_host_key_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HostKeyType.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  KnownHosts dco_decode_known_hosts(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return KnownHosts(
      hosts: dco_decode_list_host(arr[0]),
    );
  }

  @protected
  List<SshKey>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey)
        .toList();
  }

  @protected
  List<UuidValue> dco_decode_list_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    const kUuidSizeInBytes = 16;
    final bytes = dco_decode_list_prim_u_8_strict(raw);
    return List.generate(
      bytes.lengthInBytes ~/ kUuidSizeInBytes,
      (i) => UuidValue.fromByteList(
          Uint8List.view(bytes.buffer, i * kUuidSizeInBytes, kUuidSizeInBytes)),
      growable: false,
    );
  }

  @protected
  List<Annotation> dco_decode_list_annotation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_annotation).toList();
  }

  @protected
  List<CommitItem> dco_decode_list_commit_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_commit_item).toList();
  }

  @protected
  List<EncryptionKey> dco_decode_list_encryption_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_encryption_key).toList();
  }

  @protected
  List<Filter> dco_decode_list_filter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_filter).toList();
  }

  @protected
  List<Host> dco_decode_list_host(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_host).toList();
  }

  @protected
  Uint32List dco_decode_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint32List;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<Task> dco_decode_list_task(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_task).toList();
  }

  @protected
  List<TaskStatus> dco_decode_list_task_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_task_status).toList();
  }

  @protected
  Logger dco_decode_logger(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return Logger();
  }

  @protected
  UuidValue? dco_decode_opt_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_Uuid(raw);
  }

  @protected
  Oid?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
            raw);
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Utc(raw);
  }

  @protected
  FilterSelection? dco_decode_opt_box_autoadd_filter_selection(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_filter_selection(raw);
  }

  @protected
  Host? dco_decode_opt_box_autoadd_host(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_host(raw);
  }

  @protected
  Task? dco_decode_opt_box_autoadd_task(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_task(raw);
  }

  @protected
  TaskPriority? dco_decode_opt_box_autoadd_task_priority(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_task_priority(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  List<CommitItem>? dco_decode_opt_list_commit_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_commit_item(raw);
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  Repository dco_decode_repository(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Repository(
      origin: dco_decode_String(arr[0]),
      author: dco_decode_String(arr[1]),
      email: dco_decode_String(arr[2]),
      branch: dco_decode_String(arr[3]),
      sshKeyUuid: dco_decode_opt_Uuid(arr[4]),
      encryptionKeyUuid: dco_decode_opt_Uuid(arr[5]),
    );
  }

  @protected
  Settings dco_decode_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return Settings.raw(
      darkMode: dco_decode_bool(arr[0]),
      knownHosts: dco_decode_known_hosts(arr[1]),
      repository: dco_decode_repository(arr[2]),
      encryptionKeys: dco_decode_list_encryption_key(arr[3]),
      periodicSync: dco_decode_bool(arr[4]),
      filters: dco_decode_list_filter(arr[5]),
      selectedFilter: dco_decode_opt_box_autoadd_filter_selection(arr[6]),
    );
  }

  @protected
  Task dco_decode_task(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return Task.raw(
      uuid: dco_decode_Uuid(arr[0]),
      status: dco_decode_task_status(arr[1]),
      title: dco_decode_String(arr[2]),
      active: dco_decode_bool(arr[3]),
      modified: dco_decode_opt_box_autoadd_Chrono_Utc(arr[4]),
      due: dco_decode_opt_box_autoadd_Chrono_Utc(arr[5]),
      project: dco_decode_opt_box_autoadd_u_32(arr[6]),
      tags: dco_decode_list_prim_u_32_strict(arr[7]),
      annotations: dco_decode_list_annotation(arr[8]),
      priority: dco_decode_opt_box_autoadd_task_priority(arr[9]),
      wait: dco_decode_opt_box_autoadd_Chrono_Utc(arr[10]),
      depends: dco_decode_list_Uuid(arr[11]),
      uda: dco_decode_Map_String_String(arr[12]),
    );
  }

  @protected
  TaskPriority dco_decode_task_priority(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TaskPriority.values[raw as int];
  }

  @protected
  TaskStatus dco_decode_task_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TaskStatus.values[raw as int];
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Oid sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OidImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RustErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SshKey
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SshKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TaskStorage
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TaskStorageImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TaskStorage
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TaskStorageImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Oid sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OidImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustError
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RustErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SshKey
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SshKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TaskStorage
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TaskStorageImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: true);
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Oid sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OidImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RustErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SshKey
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SshKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TaskStorage
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TaskStorageImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Set<TaskStatus> sse_decode_Set_task_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_task_status(deserializer);
    return Set.from(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  UuidValue sse_decode_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return UuidValue.fromByteList(inner);
  }

  @protected
  Annotation sse_decode_annotation(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_entry = sse_decode_Chrono_Utc(deserializer);
    var var_description = sse_decode_String(deserializer);
    return Annotation(entry: var_entry, description: var_description);
  }

  @protected
  ApplicationPaths sse_decode_application_paths(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_supportPath = sse_decode_String(deserializer);
    var var_documentPath = sse_decode_String(deserializer);
    var var_cachePath = sse_decode_String(deserializer);
    var var_logPath = sse_decode_String(deserializer);
    return ApplicationPaths(
        supportPath: var_supportPath,
        documentPath: var_documentPath,
        cachePath: var_cachePath,
        logPath: var_logPath);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Oid sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
        deserializer));
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Utc(deserializer));
  }

  @protected
  ApplicationPaths sse_decode_box_autoadd_application_paths(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_application_paths(deserializer));
  }

  @protected
  Filter sse_decode_box_autoadd_filter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_filter(deserializer));
  }

  @protected
  FilterSelection sse_decode_box_autoadd_filter_selection(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_filter_selection(deserializer));
  }

  @protected
  Host sse_decode_box_autoadd_host(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_host(deserializer));
  }

  @protected
  Settings sse_decode_box_autoadd_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_settings(deserializer));
  }

  @protected
  Task sse_decode_box_autoadd_task(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_task(deserializer));
  }

  @protected
  TaskPriority sse_decode_box_autoadd_task_priority(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_task_priority(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  CommitItem sse_decode_commit_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_oid =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
            deserializer);
    var var_parent =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
            deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_author = sse_decode_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    return CommitItem(
        oid: var_oid,
        parent: var_parent,
        message: var_message,
        author: var_author,
        email: var_email);
  }

  @protected
  EncryptionKey sse_decode_encryption_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_uuid = sse_decode_Uuid(deserializer);
    var var_key = sse_decode_String(deserializer);
    return EncryptionKey(uuid: var_uuid, key: var_key);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  Filter sse_decode_filter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_uuid = sse_decode_Uuid(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_status = sse_decode_Set_task_status(deserializer);
    var var_search = sse_decode_String(deserializer);
    return Filter(
        uuid: var_uuid, name: var_name, status: var_status, search: var_search);
  }

  @protected
  FilterSelection sse_decode_filter_selection(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_uuid = sse_decode_Uuid(deserializer);
        return FilterSelection_Predefined(uuid: var_uuid);
      case 1:
        var var_filter = sse_decode_box_autoadd_filter(deserializer);
        return FilterSelection_Temporary(filter: var_filter);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Host sse_decode_host(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hostname = sse_decode_String(deserializer);
    var var_keyType = sse_decode_host_key_type(deserializer);
    var var_key = sse_decode_String(deserializer);
    return Host(hostname: var_hostname, keyType: var_keyType, key: var_key);
  }

  @protected
  HostKeyType sse_decode_host_key_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return HostKeyType.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  KnownHosts sse_decode_known_hosts(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hosts = sse_decode_list_host(deserializer);
    return KnownHosts(hosts: var_hosts);
  }

  @protected
  List<SshKey>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SshKey>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<UuidValue> sse_decode_list_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UuidValue>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Uuid(deserializer));
    }
    return ans_;
  }

  @protected
  List<Annotation> sse_decode_list_annotation(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Annotation>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_annotation(deserializer));
    }
    return ans_;
  }

  @protected
  List<CommitItem> sse_decode_list_commit_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <CommitItem>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_commit_item(deserializer));
    }
    return ans_;
  }

  @protected
  List<EncryptionKey> sse_decode_list_encryption_key(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EncryptionKey>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_encryption_key(deserializer));
    }
    return ans_;
  }

  @protected
  List<Filter> sse_decode_list_filter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Filter>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_filter(deserializer));
    }
    return ans_;
  }

  @protected
  List<Host> sse_decode_list_host(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Host>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_host(deserializer));
    }
    return ans_;
  }

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<Task> sse_decode_list_task(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Task>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_task(deserializer));
    }
    return ans_;
  }

  @protected
  List<TaskStatus> sse_decode_list_task_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TaskStatus>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_task_status(deserializer));
    }
    return ans_;
  }

  @protected
  Logger sse_decode_logger(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Logger();
  }

  @protected
  UuidValue? sse_decode_opt_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_Uuid(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Oid?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Utc(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Utc(deserializer));
    } else {
      return null;
    }
  }

  @protected
  FilterSelection? sse_decode_opt_box_autoadd_filter_selection(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_filter_selection(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Host? sse_decode_opt_box_autoadd_host(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_host(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Task? sse_decode_opt_box_autoadd_task(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_task(deserializer));
    } else {
      return null;
    }
  }

  @protected
  TaskPriority? sse_decode_opt_box_autoadd_task_priority(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_task_priority(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<CommitItem>? sse_decode_opt_list_commit_item(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_commit_item(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Repository sse_decode_repository(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_origin = sse_decode_String(deserializer);
    var var_author = sse_decode_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    var var_branch = sse_decode_String(deserializer);
    var var_sshKeyUuid = sse_decode_opt_Uuid(deserializer);
    var var_encryptionKeyUuid = sse_decode_opt_Uuid(deserializer);
    return Repository(
        origin: var_origin,
        author: var_author,
        email: var_email,
        branch: var_branch,
        sshKeyUuid: var_sshKeyUuid,
        encryptionKeyUuid: var_encryptionKeyUuid);
  }

  @protected
  Settings sse_decode_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_darkMode = sse_decode_bool(deserializer);
    var var_knownHosts = sse_decode_known_hosts(deserializer);
    var var_repository = sse_decode_repository(deserializer);
    var var_encryptionKeys = sse_decode_list_encryption_key(deserializer);
    var var_periodicSync = sse_decode_bool(deserializer);
    var var_filters = sse_decode_list_filter(deserializer);
    var var_selectedFilter =
        sse_decode_opt_box_autoadd_filter_selection(deserializer);
    return Settings.raw(
        darkMode: var_darkMode,
        knownHosts: var_knownHosts,
        repository: var_repository,
        encryptionKeys: var_encryptionKeys,
        periodicSync: var_periodicSync,
        filters: var_filters,
        selectedFilter: var_selectedFilter);
  }

  @protected
  Task sse_decode_task(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_uuid = sse_decode_Uuid(deserializer);
    var var_status = sse_decode_task_status(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_active = sse_decode_bool(deserializer);
    var var_modified = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_due = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_project = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_tags = sse_decode_list_prim_u_32_strict(deserializer);
    var var_annotations = sse_decode_list_annotation(deserializer);
    var var_priority = sse_decode_opt_box_autoadd_task_priority(deserializer);
    var var_wait = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_depends = sse_decode_list_Uuid(deserializer);
    var var_uda = sse_decode_Map_String_String(deserializer);
    return Task.raw(
        uuid: var_uuid,
        status: var_status,
        title: var_title,
        active: var_active,
        modified: var_modified,
        due: var_due,
        project: var_project,
        tags: var_tags,
        annotations: var_annotations,
        priority: var_priority,
        wait: var_wait,
        depends: var_depends,
        uda: var_uda);
  }

  @protected
  TaskPriority sse_decode_task_priority(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TaskPriority.values[inner];
  }

  @protected
  TaskStatus sse_decode_task_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TaskStatus.values[inner];
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
          Oid self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OidImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError(
          RustError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RustErrorImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
          SshKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SshKeyImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
          TaskStorage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TaskStorageImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
          TaskStorage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TaskStorageImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
          Oid self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OidImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError(
          RustError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RustErrorImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
          SshKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SshKeyImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
          TaskStorage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TaskStorageImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
        PlatformInt64Util.from(self.microsecondsSinceEpoch), serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
          Oid self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OidImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustError(
          RustError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RustErrorImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
          SshKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SshKeyImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTaskStorage(
          TaskStorage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TaskStorageImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_Set_task_status(
      Set<TaskStatus> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_task_status(self.toList(), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_Uuid(UuidValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.toBytes(), serializer);
  }

  @protected
  void sse_encode_annotation(Annotation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self.entry, serializer);
    sse_encode_String(self.description, serializer);
  }

  @protected
  void sse_encode_application_paths(
      ApplicationPaths self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.supportPath, serializer);
    sse_encode_String(self.documentPath, serializer);
    sse_encode_String(self.cachePath, serializer);
    sse_encode_String(self.logPath, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
          Oid self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Utc(
      DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_application_paths(
      ApplicationPaths self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_paths(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_filter(Filter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_filter(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_filter_selection(
      FilterSelection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_filter_selection(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_host(Host self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_host(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_settings(
      Settings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_task(Task self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_task(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_task_priority(
      TaskPriority self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_task_priority(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_commit_item(CommitItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
        self.oid, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
        self.parent, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_String(self.author, serializer);
    sse_encode_String(self.email, serializer);
  }

  @protected
  void sse_encode_encryption_key(EncryptionKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.uuid, serializer);
    sse_encode_String(self.key, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_filter(Filter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.uuid, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_Set_task_status(self.status, serializer);
    sse_encode_String(self.search, serializer);
  }

  @protected
  void sse_encode_filter_selection(
      FilterSelection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case FilterSelection_Predefined(uuid: final uuid):
        sse_encode_i_32(0, serializer);
        sse_encode_Uuid(uuid, serializer);
      case FilterSelection_Temporary(filter: final filter):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_filter(filter, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_host(Host self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.hostname, serializer);
    sse_encode_host_key_type(self.keyType, serializer);
    sse_encode_String(self.key, serializer);
  }

  @protected
  void sse_encode_host_key_type(HostKeyType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_known_hosts(KnownHosts self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_host(self.hosts, serializer);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
          List<SshKey> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSshKey(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_Uuid(List<UuidValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Uuid(item, serializer);
    }
  }

  @protected
  void sse_encode_list_annotation(
      List<Annotation> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_annotation(item, serializer);
    }
  }

  @protected
  void sse_encode_list_commit_item(
      List<CommitItem> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_commit_item(item, serializer);
    }
  }

  @protected
  void sse_encode_list_encryption_key(
      List<EncryptionKey> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_encryption_key(item, serializer);
    }
  }

  @protected
  void sse_encode_list_filter(List<Filter> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_filter(item, serializer);
    }
  }

  @protected
  void sse_encode_list_host(List<Host> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_host(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_32_strict(
      Uint32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_task(List<Task> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_task(item, serializer);
    }
  }

  @protected
  void sse_encode_list_task_status(
      List<TaskStatus> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_task_status(item, serializer);
    }
  }

  @protected
  void sse_encode_logger(Logger self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_opt_Uuid(UuidValue? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_Uuid(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
          Oid? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOid(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Utc(
      DateTime? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Utc(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_filter_selection(
      FilterSelection? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_filter_selection(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_host(Host? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_host(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_task(Task? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_task(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_task_priority(
      TaskPriority? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_task_priority(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_commit_item(
      List<CommitItem>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_commit_item(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_repository(Repository self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.origin, serializer);
    sse_encode_String(self.author, serializer);
    sse_encode_String(self.email, serializer);
    sse_encode_String(self.branch, serializer);
    sse_encode_opt_Uuid(self.sshKeyUuid, serializer);
    sse_encode_opt_Uuid(self.encryptionKeyUuid, serializer);
  }

  @protected
  void sse_encode_settings(Settings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.darkMode, serializer);
    sse_encode_known_hosts(self.knownHosts, serializer);
    sse_encode_repository(self.repository, serializer);
    sse_encode_list_encryption_key(self.encryptionKeys, serializer);
    sse_encode_bool(self.periodicSync, serializer);
    sse_encode_list_filter(self.filters, serializer);
    sse_encode_opt_box_autoadd_filter_selection(
        self.selectedFilter, serializer);
  }

  @protected
  void sse_encode_task(Task self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.uuid, serializer);
    sse_encode_task_status(self.status, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_bool(self.active, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.modified, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.due, serializer);
    sse_encode_opt_box_autoadd_u_32(self.project, serializer);
    sse_encode_list_prim_u_32_strict(self.tags, serializer);
    sse_encode_list_annotation(self.annotations, serializer);
    sse_encode_opt_box_autoadd_task_priority(self.priority, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.wait, serializer);
    sse_encode_list_Uuid(self.depends, serializer);
    sse_encode_Map_String_String(self.uda, serializer);
  }

  @protected
  void sse_encode_task_priority(TaskPriority self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_task_status(TaskStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class OidImpl extends RustOpaque implements Oid {
  // Not to be used by end users
  OidImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OidImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Oid,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Oid,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OidPtr,
  );
}

@sealed
class RustErrorImpl extends RustOpaque implements RustError {
  // Not to be used by end users
  RustErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RustErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RustError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RustError,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RustErrorPtr,
  );

  Host? asUnknownHost() =>
      RustLib.instance.api.crateApiErrorRustErrorAsUnknownHost(
        that: this,
      );

  String toErrorString() =>
      RustLib.instance.api.crateApiErrorRustErrorToErrorString(
        that: this,
      );
}

@sealed
class SshKeyImpl extends RustOpaque implements SshKey {
  // Not to be used by end users
  SshKeyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SshKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SshKey,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SshKey,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SshKeyPtr,
  );

  String get publicKey => RustLib.instance.api.crateApiSettingsSshKeyPublicKey(
        that: this,
      );

  UuidValue get uuid => RustLib.instance.api.crateApiSettingsSshKeyUuid(
        that: this,
      );
}

@sealed
class TaskStorageImpl extends RustOpaque implements TaskStorage {
  // Not to be used by end users
  TaskStorageImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TaskStorageImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_TaskStorage,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_TaskStorage,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TaskStoragePtr,
  );

  Future<void> add({required Task task}) => RustLib.instance.api
      .crateApiRepositoryTaskStorageAdd(that: this, task: task);

  Future<bool> addAndCommit({required String message}) => RustLib.instance.api
      .crateApiRepositoryTaskStorageAddAndCommit(that: this, message: message);

  Future<bool> changeCategory(
          {required Task task, required TaskStatus status}) =>
      RustLib.instance.api.crateApiRepositoryTaskStorageChangeCategory(
          that: this, task: task, status: status);

  Future<void> checkout() =>
      RustLib.instance.api.crateApiRepositoryTaskStorageCheckout(
        that: this,
      );

  Future<void> clear() =>
      RustLib.instance.api.crateApiRepositoryTaskStorageClear(
        that: this,
      );

  Future<void> cloneRepository() =>
      RustLib.instance.api.crateApiRepositoryTaskStorageCloneRepository(
        that: this,
      );

  Future<String> export_() =>
      RustLib.instance.api.crateApiRepositoryTaskStorageExport(
        that: this,
      );

  Future<void> forceHardReset({required Oid commit}) => RustLib.instance.api
      .crateApiRepositoryTaskStorageForceHardReset(that: this, commit: commit);

  Future<void> import_({required String content}) => RustLib.instance.api
      .crateApiRepositoryTaskStorageImport(that: this, content: content);

  Future<void> initRepotitory() =>
      RustLib.instance.api.crateApiRepositoryTaskStorageInitRepotitory(
        that: this,
      );

  Future<List<CommitItem>?> log({Oid? oid, int? n}) => RustLib.instance.api
      .crateApiRepositoryTaskStorageLog(that: this, oid: oid, n: n);

  Future<void> push({required bool force}) => RustLib.instance.api
      .crateApiRepositoryTaskStoragePush(that: this, force: force);

  Future<bool> removeTask({required Task task}) => RustLib.instance.api
      .crateApiRepositoryTaskStorageRemoveTask(that: this, task: task);

  Future<void> sync_() =>
      RustLib.instance.api.crateApiRepositoryTaskStorageSync(
        that: this,
      );

  Future<Task?> taskByUuid({required UuidValue uuid}) => RustLib.instance.api
      .crateApiRepositoryTaskStorageTaskByUuid(that: this, uuid: uuid);

  Future<List<Task>> tasks() =>
      RustLib.instance.api.crateApiRepositoryTaskStorageTasks(
        that: this,
      );

  Future<List<Task>> tasksWithFilter({required Filter filter}) => RustLib
      .instance.api
      .crateApiRepositoryTaskStorageTasksWithFilter(that: this, filter: filter);

  Future<void> unload() =>
      RustLib.instance.api.crateApiRepositoryTaskStorageUnload(
        that: this,
      );

  Future<bool> update({required Task task}) => RustLib.instance.api
      .crateApiRepositoryTaskStorageUpdate(that: this, task: task);
}
